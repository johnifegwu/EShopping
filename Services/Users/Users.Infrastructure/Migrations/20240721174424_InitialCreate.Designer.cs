// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Users.Infrastructure.Persistence;

#nullable disable

namespace Users.Infrastructure.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20240721174424_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Users.Core.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_type_id");

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address_type_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified_date");

                    b.Property<int?>("MaxAddressPerUser")
                        .HasColumnType("int")
                        .HasColumnName("max_address_per_user");

                    b.HasKey("Id")
                        .HasName("PK_addresstypes");

                    b.ToTable("addresstypes", (string)null);
                });

            modelBuilder.Entity("Users.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("PK_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Users.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified_date");

                    b.Property<DateTime?>("PasswordExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("password_expiry_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordRecoveryUID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_recovery_uid");

                    b.Property<DateTime?>("PasswordRecoveryUIDExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("recovery_expiry");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_salt");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("PK_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Users.Core.Entities.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_address_id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("address_line2");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("address_type_id");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("PK_useraddresses");

                    b.HasIndex("UserId");

                    b.ToTable("useraddresses", (string)null);
                });

            modelBuilder.Entity("Users.Core.Entities.UserRoleJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_role_join_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_userrolejoin");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("userrolejoin", (string)null);
                });

            modelBuilder.Entity("Users.Core.Entities.UserAddress", b =>
                {
                    b.HasOne("Users.Core.Entities.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Core.Entities.UserRoleJoin", b =>
                {
                    b.HasOne("Users.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Core.Entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Users.Core.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
